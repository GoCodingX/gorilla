// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateQuoteRequest defines model for CreateQuoteRequest.
type CreateQuoteRequest struct {
	AuthorId  openapi_types.UUID `json:"author_id"`
	CreatorId openapi_types.UUID `json:"creator_id"`
	Text      string             `json:"text"`
}

// Detail defines model for Detail.
type Detail struct {
	// Field The specific field related to the error.
	Field string `json:"field"`

	// Message Human-readable explanation of the field error.
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code HTTP status code.
	Code int `json:"code"`

	// Details List of detailed error objects for granular issues.
	Details *[]Detail `json:"details,omitempty"`

	// Message Human-readable summary of the error.
	Message string `json:"message"`

	// Status Status code for categorization, e.g., 'INVALID_ARGUMENT'.
	Status string `json:"status"`
}

// Quote defines model for Quote.
type Quote struct {
	AuthorId openapi_types.UUID `json:"author_id"`
	Text     string             `json:"text"`
}

// PostQuotesJSONRequestBody defines body for PostQuotes for application/json ContentType.
type PostQuotesJSONRequestBody = CreateQuoteRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /quotes)
	PostQuotes(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostQuotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostQuotes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostQuotes(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/quotes", wrapper.PostQuotes)

}

type PostQuotesRequestObject struct {
	Body *PostQuotesJSONRequestBody
}

type PostQuotesResponseObject interface {
	VisitPostQuotesResponse(w http.ResponseWriter) error
}

type PostQuotes200JSONResponse Quote

func (response PostQuotes200JSONResponse) VisitPostQuotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQuotes400JSONResponse ErrorResponse

func (response PostQuotes400JSONResponse) VisitPostQuotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /quotes)
	PostQuotes(ctx context.Context, request PostQuotesRequestObject) (PostQuotesResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostQuotes operation middleware
func (sh *strictHandler) PostQuotes(ctx echo.Context) error {
	var request PostQuotesRequestObject

	var body PostQuotesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostQuotes(ctx.Request().Context(), request.(PostQuotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostQuotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostQuotesResponseObject); ok {
		return validResponse.VisitPostQuotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVb0/zNhD/KtZtEm/SNqxldHkHA22VGAPW8QYhdI0vrVliG/vC6Kp898lOoe2T6qke",
	"ieddm5zv9+98WUFuKms0afaQrcDnC6ow/vzVETLd1obpjl5q8hyeYln+WUD2sIIfHRWQwQ+DTYfB+vgg",
	"noImWYF1xpJjRbFnHnoa96Rk+EdvWNmSIIPR8OQU82HaO8lnw95oLIe9cfHLaW908vPx+DRNR3I8gwQK",
	"4ypkyKCulYQEeGnDac9O6Tk0TQKOXmrlSEL2sA32+FFrZs+UMzSPTQIXxKjKwGSXZaGojAQl+dwpy8po",
	"yGC6IOEt5apQuYg1wlGJTFKwEbwgQc4Z14dkSxlVAaJDNYGKvMc5dWF+ryvUPUcocVaSoDdbosbwUpgi",
	"wrTYe8AuA5ioas9iRgLFK5ZKCpTSkff9g4a1ujfUuq4lcBlQ78hboz11rcuN3CdpOr0RnpFrL0LFDutR",
	"mm4lqzRveCrNNCcXcGXMynd7XynPwZi2gNa+iJaxF4VxYu5Q1yU6obyvKRqhmKrY7GtTvJ6P5oMPOofL",
	"bwnP11WFbvke3J7I7kNEbbpF5N/fNyytd124vzaeRqU5Ms2NU//Fjomg/ryfiKPJ9f3Z1eTi6ezut7//",
	"uLyeHu1y+PL14ZsVUt648MFv38C0q6AzKFjz4rstggSY3ni38wKdFP8a94+wuPTCFEVQoPQV6TkvIDs+",
	"JDq2TLaId9WGI0oXJiCz4ogb9Yuzm4nw5F7JQQKv5Hyb33E/7aeBr7Gk0SrIYBgfJWCRF9GpwUvoEH9a",
	"0y7hYGRMeCIhgxvj+bataRmT53Mjl+191Ey63dzWliqPxwbPPsC/r/tD92DPlyBK3Z3FtkqgiHxh2zx2",
	"NUU327URtfyUpp9GcP256XKyxOIdNdg8+kTQ3U24B/wcpdjyq2ma/wMAAP//u7qlfm4HAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
