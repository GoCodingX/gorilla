// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateAuthorRequest defines model for CreateAuthorRequest.
type CreateAuthorRequest struct {
	Name string `json:"name"`
}

// CreateAuthorResponse defines model for CreateAuthorResponse.
type CreateAuthorResponse struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// CreateQuoteRequest defines model for CreateQuoteRequest.
type CreateQuoteRequest struct {
	AuthorId openapi_types.UUID `json:"author_id"`
	Text     string             `json:"text"`
}

// CreateQuoteResponse defines model for CreateQuoteResponse.
type CreateQuoteResponse struct {
	AuthorId openapi_types.UUID `json:"author_id"`
	Id       openapi_types.UUID `json:"id"`
	Text     string             `json:"text"`
}

// Detail defines model for Detail.
type Detail struct {
	// Field The specific field related to the error.
	Field string `json:"field"`

	// Message Human-readable explanation of the field error.
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code HTTP status code.
	Code int `json:"code"`

	// Details List of detailed error objects for granular issues.
	Details *[]Detail `json:"details,omitempty"`

	// Message Human-readable summary of the error.
	Message string `json:"message"`

	// Status Status code for categorization, e.g., 'INVALID_ARGUMENT'.
	Status string `json:"status"`
}

// GetQuotesResponse List of quotes.
type GetQuotesResponse = []CreateQuoteResponse

// GetQuotesParams defines parameters for GetQuotes.
type GetQuotesParams struct {
	// Author Filter by author
	Author *string `form:"author,omitempty" json:"author,omitempty"`
}

// PostAuthorsJSONRequestBody defines body for PostAuthors for application/json ContentType.
type PostAuthorsJSONRequestBody = CreateAuthorRequest

// PostQuotesJSONRequestBody defines body for PostQuotes for application/json ContentType.
type PostQuotesJSONRequestBody = CreateQuoteRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authors)
	PostAuthors(ctx echo.Context) error
	// Gets a list of Quotes.
	// (GET /quotes)
	GetQuotes(ctx echo.Context, params GetQuotesParams) error

	// (POST /quotes)
	PostQuotes(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthors converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthors(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthors(ctx)
	return err
}

// GetQuotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetQuotes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuotesParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQuotes(ctx, params)
	return err
}

// PostQuotes converts echo context to params.
func (w *ServerInterfaceWrapper) PostQuotes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostQuotes(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authors", wrapper.PostAuthors)
	router.GET(baseURL+"/quotes", wrapper.GetQuotes)
	router.POST(baseURL+"/quotes", wrapper.PostQuotes)

}

type PostAuthorsRequestObject struct {
	Body *PostAuthorsJSONRequestBody
}

type PostAuthorsResponseObject interface {
	VisitPostAuthorsResponse(w http.ResponseWriter) error
}

type PostAuthors200JSONResponse CreateAuthorResponse

func (response PostAuthors200JSONResponse) VisitPostAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthors400JSONResponse ErrorResponse

func (response PostAuthors400JSONResponse) VisitPostAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetQuotesRequestObject struct {
	Params GetQuotesParams
}

type GetQuotesResponseObject interface {
	VisitGetQuotesResponse(w http.ResponseWriter) error
}

type GetQuotes200JSONResponse GetQuotesResponse

func (response GetQuotes200JSONResponse) VisitGetQuotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQuotesRequestObject struct {
	Body *PostQuotesJSONRequestBody
}

type PostQuotesResponseObject interface {
	VisitPostQuotesResponse(w http.ResponseWriter) error
}

type PostQuotes200JSONResponse CreateQuoteResponse

func (response PostQuotes200JSONResponse) VisitPostQuotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostQuotes400JSONResponse ErrorResponse

func (response PostQuotes400JSONResponse) VisitPostQuotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /authors)
	PostAuthors(ctx context.Context, request PostAuthorsRequestObject) (PostAuthorsResponseObject, error)
	// Gets a list of Quotes.
	// (GET /quotes)
	GetQuotes(ctx context.Context, request GetQuotesRequestObject) (GetQuotesResponseObject, error)

	// (POST /quotes)
	PostQuotes(ctx context.Context, request PostQuotesRequestObject) (PostQuotesResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthors operation middleware
func (sh *strictHandler) PostAuthors(ctx echo.Context) error {
	var request PostAuthorsRequestObject

	var body PostAuthorsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthors(ctx.Request().Context(), request.(PostAuthorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthors")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthorsResponseObject); ok {
		return validResponse.VisitPostAuthorsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetQuotes operation middleware
func (sh *strictHandler) GetQuotes(ctx echo.Context, params GetQuotesParams) error {
	var request GetQuotesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetQuotes(ctx.Request().Context(), request.(GetQuotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQuotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetQuotesResponseObject); ok {
		return validResponse.VisitGetQuotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostQuotes operation middleware
func (sh *strictHandler) PostQuotes(ctx echo.Context) error {
	var request PostQuotesRequestObject

	var body PostQuotesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostQuotes(ctx.Request().Context(), request.(PostQuotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostQuotes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostQuotesResponseObject); ok {
		return validResponse.VisitPostQuotesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xW3W7bRhN9lcV+H5AbSqIrOVZ5p8RuasANnNTNTWAEI3JIbkLu0rND12qgdy92V3+U",
	"6NgpYrjolShyOHPmnDPD/SpTUzdGo2Yrk6/SpiXW4C9fEwLjrOXS0Hu8adGyu92QaZBYoQ/SUKP7xTuo",
	"mwplIl+XQBVacarSL6itjGSt9AXqgkuZHEWSF40Ls0xKF3K5jCThTasIM5l8DPmuN1Fm/hlTlstoD41t",
	"jLZ4CEdlXTCT8fEJpON4cJzOx4PJNBsPpvnPJ4PJ8cuj6UkcT7LpXEYyN1QDy0S2rcocYrhbIx6/7DTg",
	"/u51EP1wEjyGB5h41xrGe2UBz9On56GD8Y67dUugTPxp6ItoYGGFyfPvZMSnjHbaepCY+xzyrMz8Z/Tw",
	"MB4lyikyqOpQh1xh5dnI0KakGlZGy0RelShsg6nKVSp8jCCsgDETbASXKJDI0FBGO+1g7Ur0dF6jtVDg",
	"YZlf2xr0gBAymFco8K6pQIN7KEzuy4TaPcXOXDFRt5bFHAWIW6hUJiDLCK0dyoeYC31vofVxduaq3m/h",
	"1GR9LV1dXQrLwK0VLqKDehLHOzZSmrc4lWYskFzdzGtlD3NfKMuOmBCAK15EQGxFbkgUBLqtgISytkVP",
	"hGKsfbL/E+Yykf8bbb81o9WHZrTyx3KDB4hg8T3i2baugRZr4Xok++AkCurmHv+wzyyBu8Nyv2859Z2m",
	"wFgYUn/5jJHAYTGMxIvztx9mF+enn2bv3/zx29nbqxddDPuPHzSKV3nLwgZfn2HeIPu1Z3dN0y/hjY97",
	"tDx9O/VAKwdd6dy4ZKzY9+tfEbPLc2GRbpFkJG+RbABzNIyHsctjGtTQKJnIsb8VyQa49KhGYa/468aE",
	"j5ybAs/6eSYTeWksz1ZBgTu0/MpkizAkmlH7t6BpKpX690afrQOwPuc8rvvuEch32+U2hAnQImCWu0oy",
	"teilDez5fn6K4yfCuJboEKTjcIVP0I6Ukx+Ipbu4ekC8gkzsELmM5CgY0mUusEfkjbW9NwhqZHSm+Lhv",
	"8F9UxUhivtiK4Na635VOA2dRmcibFmmxPl4lchO7bfCfn+Kun1DmwxHvobdAXg34jsRutYUVGei0AkS1",
	"2gbvVttgGX1jxjb8P92IdU6z35iw0N0zzNfeBrxnvDy6f890OeX98g3z0lLlzn7MTTIaVSaFqjSWk2k8",
	"jeXyevl3AAAA//90MIdVCw4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
