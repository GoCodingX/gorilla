// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package=jwtprocessortest -source=interfaces.go -destination=jwtprocessortest/jwt.go .
//

// Package jwtprocessortest is a generated GoMock package.
package jwtprocessortest

import (
	reflect "reflect"

	jwtprocessor "github.com/GoCodingX/gorilla/internal/jwtprocessor"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ValidateAndDecodeAppleJWT mocks base method.
func (m *MockProvider) ValidateAndDecodeAppleJWT(signedPayload string) (*jwtprocessor.DecodedPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndDecodeAppleJWT", signedPayload)
	ret0, _ := ret[0].(*jwtprocessor.DecodedPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndDecodeAppleJWT indicates an expected call of ValidateAndDecodeAppleJWT.
func (mr *MockProviderMockRecorder) ValidateAndDecodeAppleJWT(signedPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndDecodeAppleJWT", reflect.TypeOf((*MockProvider)(nil).ValidateAndDecodeAppleJWT), signedPayload)
}
