// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package=clientstest -source=interfaces.go -destination=clientstest/clients.go .
//

// Package clientstest is a generated GoMock package.
package clientstest

import (
	context "context"
	reflect "reflect"

	clients "github.com/GoCodingX/gorilla/internal/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockFeatureFlagClient is a mock of FeatureFlagClient interface.
type MockFeatureFlagClient struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagClientMockRecorder
	isgomock struct{}
}

// MockFeatureFlagClientMockRecorder is the mock recorder for MockFeatureFlagClient.
type MockFeatureFlagClientMockRecorder struct {
	mock *MockFeatureFlagClient
}

// NewMockFeatureFlagClient creates a new mock instance.
func NewMockFeatureFlagClient(ctrl *gomock.Controller) *MockFeatureFlagClient {
	mock := &MockFeatureFlagClient{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagClient) EXPECT() *MockFeatureFlagClientMockRecorder {
	return m.recorder
}

// UnlockFeatureFlag mocks base method.
func (m *MockFeatureFlagClient) UnlockFeatureFlag(ctx context.Context, params *clients.UnlockFeatureFlagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockFeatureFlag", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockFeatureFlag indicates an expected call of UnlockFeatureFlag.
func (mr *MockFeatureFlagClientMockRecorder) UnlockFeatureFlag(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockFeatureFlag", reflect.TypeOf((*MockFeatureFlagClient)(nil).UnlockFeatureFlag), ctx, params)
}
