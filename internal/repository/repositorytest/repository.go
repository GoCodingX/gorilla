// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -package=repositorytest -source=repository.go -destination=repositorytest/repository.go .
//

// Package repositorytest is a generated GoMock package.
package repositorytest

import (
	context "context"
	reflect "reflect"

	repository "github.com/GoCodingX/gorilla/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockRepository) CreateAuthor(ctx context.Context, author *repository.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockRepositoryMockRecorder) CreateAuthor(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockRepository)(nil).CreateAuthor), ctx, author)
}

// CreateQuote mocks base method.
func (m *MockRepository) CreateQuote(ctx context.Context, quote *repository.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuote", ctx, quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuote indicates an expected call of CreateQuote.
func (mr *MockRepositoryMockRecorder) CreateQuote(ctx, quote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuote", reflect.TypeOf((*MockRepository)(nil).CreateQuote), ctx, quote)
}

// GetQuotes mocks base method.
func (m *MockRepository) GetQuotes(ctx context.Context, params *repository.GetQuotesParams) ([]repository.Quote, *repository.QuotesCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotes", ctx, params)
	ret0, _ := ret[0].([]repository.Quote)
	ret1, _ := ret[1].(*repository.QuotesCursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetQuotes indicates an expected call of GetQuotes.
func (mr *MockRepositoryMockRecorder) GetQuotes(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotes", reflect.TypeOf((*MockRepository)(nil).GetQuotes), ctx, params)
}
